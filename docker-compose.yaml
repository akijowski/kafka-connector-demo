version: '3.6'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      retries: 20
      interval: 10s
    ports:
      - 2181:2181
    env_file:
      - env/local/zookeeper.env
    networks:
      - kafka-demo

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    restart: always
    healthcheck:
      test: nc -z kafka 9092 || exit 1
      interval: 10s
      retries: 25
      start_period: 20s
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 9092:9092
      - 9101:9101
    env_file:
      - env/local/kafka-broker.env
    networks:
      - kafka-demo

  schemaregistry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schemaregistry
    container_name: schemaregistry
    restart: always
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --fail --silent http://schemaregistry:8085/subjects --output /dev/null || exit 1
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - 8085:8085
    env_file:
      - env/local/kafka-schema-registry.env
    networks:
      - kafka-demo

  restproxy:
    image: confluentinc/cp-kafka-rest:latest
    hostname: restproxy
    container_name: restproxy
    restart: always
    depends_on:
      schemaregistry:
        condition: service_healthy
    ports:
      - 8086:8086
    env_file:
      - env/local/kafka-rest-proxy.env
    networks:
      - kafka-demo

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: control-center
    depends_on:
      kafka:
        condition: service_healthy
      schemaregistry:
        condition: service_healthy
    ports:
      - 9021:9021
    env_file:
      - env/local/kafka-control-center.env
    command:
      - bash
      - -c
      - |
        echo "Waiting one minute for Kafka brokers to start and necessary topics to be available"
        sleep 60
        /etc/confluent/docker/run
    networks:
      - kafka-demo

  kafka-connect-debezium:
    image: confluentinc/cp-kafka-connect-base:latest
    container_name: conn-debezium
    restart: always
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --fail --silent http://kafka-connect-debezium:8083/ --output /dev/null || exit 1
    depends_on:
      kafka:
        condition: service_healthy
      schemaregistry:
        condition: service_healthy
    ports:
      - 8083:8083
      - 8080:8080
      - 1999:1999
    env_file:
      - env/local/kafka-connect-debezium.env
    environment:
      KAFKA_OPTS: '-javaagent:/kafka/etc/jmx_agent.jar=8080:/kafka/etc/jmx-config.yml'
      KAFKA_JMX_PORT: 1999
      KAFKA_JMX_HOSTNAME: '0.0.0.0'
    volumes:
      - $PWD/tmp/debezium/data:/data
      # Add the prometheus agent jar and config file
      - $PWD/tmp/jmx_agent.jar:/kafka/etc/jmx_agent.jar
      - $PWD/tmp/jmx-config.yml:/kafka/etc/jmx-config.yml
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:1.9.7
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity
    networks:
      - kafka-demo

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    volumes:
      - ${PWD}/data/local/mysql:/docker-entrypoint-initdb.d
      - ${PWD}/tmp/mysql/data:/data
    networks:
      - kafka-demo

  debezium-init:
    image: curlimages/curl:latest
    container_name: debezium-init
    restart: on-failure
    depends_on:
      kafka-connect-debezium:
        condition: service_healthy
      mysql:
        condition: service_started
    volumes:
      - $PWD/bin/debezium:/scripts
    environment:
      MY_SQL_PASSWORD: dbz
    entrypoint: /bin/sh
    command: /scripts/local-curl-put
    networks:
      - kafka-demo

  kcat-debezium-consumer:
    image: confluentinc/cp-kafkacat:latest
    container_name: kcat-deb-con
    restart: on-failure
    depends_on:
      kafka-connect-debezium:
        condition: service_healthy
      mysql:
        condition: service_started
    tty: true
    command: kafkacat -b kafka:29092 -r http://schemaregistry:8085 -s avro -t asgard.demo.ORDERS -C | jq .
    networks:
      - kafka-demo

networks:
  kafka-demo:
    name: kafka-demo
